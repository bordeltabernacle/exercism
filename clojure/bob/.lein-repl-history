(load-file "bob_test.clj")
(ns bob-test
  (:require [clojure.test :refer :all]))
(load-file "bob_test.clj")
quit
(load-file "~/exercism.io/clojure/bob/bob_test.clj")
quit
(load-file "bob_test.clj")
(quit)
(defn question? [sentence] (= \? (last sentence)))
(question? "Hello")
(question? "Hello?")
(defn question? [sentence] (= ? (last sentence)))
(defn yelling?  [sentence] (= (str/upper-case sentence) sentence))
(:require [clojure.string :as str])
(:require (clojure.string :as str))
(ns bob
  (:require [clojure.string :as str]))
(defn yelling?  [sentence] (= (str/upper-case sentence) sentence))
(yelling? "Hello")
(yelling? "HELLO")
(defn silence?  [sentence] (str/blank? sentence))
(silence? "Hello")
(silence? "")
(silence? "       ")
(ns user)
(load-file "bob_test.clj")
(string? "1, 2, 3")
(numeric? "1, 2, 3")
(Character.isLetter "1, 2, 3")
(Character/isLetter "1, 2, 3")
(char? "1, 2, 3")
(load-file "bob_test.clj")
(some Character/isLetter "Hello")
(load-file "bob_test.clj")
(defn has-letter? [msg] (some #(Character/isLetter (int %)) msg))
(has-letter? "Hello")
(has-letter? "Hello1")
(has-letter? "1Hello1")
(has-letter? "1")
(has-letter? "1 2 3")
(has-letter? "1, 2, 3")
(int "Hello")
(int "1")
#(Character/isLetter (int %)) "hello")
#(Character/isLetter  %) "hello")
(some #(Character/isLetter %) "Hello")
(some #(Character/isLetter %) "1, 2, 3")
(some #(Character/isLetter %) "4?")
(load-file "bob_test.clj")
(quit)
